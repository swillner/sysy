#!/usr/bin/env bash
set -e

export GOMAXPROCS=1
GVMPARENTPATH="$HOME/.local"

# shellcheck source=/dev/null
[[ -f "$GVMPARENTPATH/gvm/scripts/gvm" ]] && source "$GVMPARENTPATH/gvm/scripts/gvm"

if ask_to_install_if_not_found go
then
    export GVM_NO_UPDATE_PROFILE=1
    bash <(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer) master "$GVMPARENTPATH"
    # shellcheck source=/dev/null
    source "$GVMPARENTPATH/gvm/scripts/gvm"
    defaultversion="go1.13"
    goversion=$(get_response "Install go version:" "[$defaultversion]")
    if [[ -z "$goversion" ]]
    then
        goversion="$defaultversion"
    fi
    if ask_user "Compile $goversion from source?" "y"
    then
        gvm install "$goversion" --binary --name="${goversion}-binary"
        gvm use "${goversion}-binary"
        export GOROOT_BOOTSTRAP=$GOROOT
        gvm install "${goversion}"
        gvm uninstall "${goversion}-binary"
    else
        gvm install "$goversion" --binary
    fi
    gvm use "$goversion" --default
    export GOPATH
fi

command=$1
shift || return 0
case "$command" in

    desc)
        echo
        ;;

    install)
        go get "$@"
        ;;

    sync)
        packages=$(printf '%s\n' "$@" | sort | uniq)
        already_installed=$(go list -f '{{if not .Standard}}{{.ImportPath}}{{end}}' all | sort |uniq)
        readarray -t missing < <(comm -23 <(echo "$packages") <(echo "$already_installed"))
        [[ "${#missing[@]}" == 0 ]] || go get "${missing[@]}"
        ;;

    uninstall)
        for package in "$@"
        do
            go clean -i "${package}..."
        done
        ;;

    update)
        go get -u "$@"
        ;;

    *)
        error_and_exit "Module does not support this command"
        ;;

esac
