#!/usr/bin/env bash
set -e

export GOMAXPROCS=1
GVMPARENTPATH="$HOME/.local"

if [[ -f "$GVMPARENTPATH/gvm/scripts/gvm" ]]
then
    # shellcheck source=/dev/null
    if ! source "$GVMPARENTPATH/gvm/scripts/gvm"
    then
        echo "Error in: source $GVMPARENTPATH/gvm/scripts/gvm" >&2
        exit 1
    fi
fi

latest_go_version () {
    gvm listall | sed -n 's/^ \+\(go[0-9]\+\.[0-9]\+\(\.[0-9]\+\)\?\)$/\1/p' | sort --reverse --version-sort | head -n 1
}

install_go_version () {
    local goversion=$1
    local previous_goversion
    previous_goversion=$(gvm list | sed -n 's/^=> \+\(.\+\)$/\1/p')
    if [[ "$goversion" == "$previous_goversion" ]]
    then
        return
    fi
    if ask_user "Compile $goversion from source?" "y"
    then
        if [[ -z "$previous_goversion" ]]
        then
            gvm install "$goversion" --binary --name="${goversion}-tmp-binary"
            gvm use "${goversion}-tmp-binary"
        fi

        GOROOT_BOOTSTRAP=$GOROOT gvm install "${goversion}"

        if [[ -z "$previous_goversion" ]]
        then
            gvm uninstall "${goversion}-tmp-binary"
        fi
    else
        gvm install "$goversion" --binary
    fi
    gvm use "$goversion" --default
    if [[ "$goversion" == "go1.16" ]]
    then
        go env -w GO111MODULE=auto
    fi
    export GOPATH
}

ensure_go () {
    if ask_to_install_if_not_found go "(would install go using gvm, which is installed first)"
    then
        if ! command -v gvm >/dev/null 2>/dev/null
        then
            if ! command -v bison >/dev/null 2>/dev/null
            then
                error_and_exit "Please install bison first"
            fi
            export GVM_NO_UPDATE_PROFILE=1
            bash <(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer) master "$GVMPARENTPATH"
            # shellcheck source=/dev/null
            source "$GVMPARENTPATH/gvm/scripts/gvm"
        fi

        defaultversion="$(latest_go_version)"
        goversion=$(get_response "Install go version:" "[$defaultversion]")
        if [[ -z "$goversion" ]]
        then
            goversion="$defaultversion"
        fi

        install_go_version "$goversion"
    fi || error_and_exit "Could not install go"
}

command=$1
shift || return 0
case "$command" in

    desc)
        echo
        ;;

    install)
        ensure_go
        go install -modcacherw "$@"
        ;;

    sync)
        ensure_go
        for package in "$@"
        do
            go install -modcacherw "$package"
        done
        ;;

    uninstall)
        ensure_go
        for package in "$@"
        do
            go clean -i "${package}..."
        done
        ;;

    update)
        ensure_go
        if command -v gvm >/dev/null 2>/dev/null
        then
            install_go_version "$(latest_go_version)"
        fi
        for package in "$@"
        do
            go install -modcacherw -v "$package"
        done
        if command -v gvm >/dev/null 2>/dev/null
        then
            info "Currently installed go versions (use 'gvm uninstall VERSION' to uninstall):"
            gvm list
        fi
        ;;

    *)
        error_and_exit "Module does not support this command"
        ;;

esac
