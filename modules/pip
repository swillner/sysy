#!/usr/bin/env bash
set -e

PATH=$PATH:$HOME/.local/bin

ensure_python () {
    if ask_to_install_if_not_found python3
    then
        sudo apt-get install python3 || error_and_exit "Could not install python3"
    fi

    if ask_to_install_if_not_found pip3
    then
        (curl -s https://bootstrap.pypa.io/get-pip.py | python3 - --user) || error_and_exit "Could not install pip3"
    fi
}

command=$1
shift || return 0
case "$command" in

    desc)
        echo
        ;;

    install)
        ensure_python
        export TMPDIR=$XDG_RUNTIME_DIR
        pip3 install --user "$@"
        ;;

    sync)
        ensure_python
        declare -A packages
        for package in "$@"
        do
            key=$(sed 's/^git+[a-zA-Z0-9.:\/_\-]*\/\([^\/@]*\)\(@.*\)\?$/\1/g' <<< "$package" \
                      | sed 's/^\(.*\)\.git$/\1/g' \
                      | sed 's/^\(.*\)==.*$/\1/g' \
                      | sed 's/[-_.]/-/g' \
                      | sed 's/\[.*\]//g' \
                      | tr '[:upper:]' '[:lower:]')
            packages[${key}]=$package
        done
        already_installed=$(pip3 list \
                                | tail -n +3 \
                                | cut -d' ' -f1 \
                                | sed 's/[-_.]/-/g' \
                                | tr '[:upper:]' '[:lower:]' \
                                | sort)
        readarray -t missing < <(comm -23 <(\
                                            echo "${!packages[*]}" \
                                                | sed 's/ /\n/g' \
                                                | sort \
                                                | uniq \
                                 ) <(echo "$already_installed"))
        if [[ "${#missing[@]}" -gt 0 ]]
        then
            to_install=()
            for package in "${missing[@]}"
            do
                to_install+=( "${packages[${package}]}" )
            done
            export TMPDIR=$XDG_RUNTIME_DIR
            pip3 install --user "${to_install[@]}"
        fi
        ;;

    uninstall)
        ensure_python
        pip3 uninstall "$@"
        ;;

    update)
        ensure_python
        export TMPDIR=$XDG_RUNTIME_DIR
        pip3 install --user --upgrade "$@"
        ;;

    *)
        error_and_exit "Module does not support this command"
        ;;

esac
