#!/usr/bin/env bash
pushd "$(dirname "$0")" >/dev/null || exit 1
scriptpath=$(pwd)
popd >/dev/null || exit 1

command=$1
shift

call_module () {
    local module=$1
    local command=$2
    shift 2
    local module_file=$scriptpath/modules/$module
    source "$module_file" "$command" "$@"
}

check_module () {
    local module=$1
    local module_file=$scriptpath/modules/$module
    if [ ! -e "$module_file" ]
    then
        echo "module $module not found" 1>&2
        exit 2
    fi
}

case "$command" in

    diff)
        module=$1
        if [ -z "$module" ]
        then
            echo "please specify a module" 1>&2
            exit 2
        fi
        check_module "$module"
        packages_file=$scriptpath/packages/$module
        call_module "$module" diff
        ;;

    edit)
        module=$1
        if [ -z "$module" ]
        then
            echo "please specify a module" 1>&2
            exit 2
        fi
        check_module "$module"
        packages_file=$scriptpath/packages/$module
        $VISUAL "$packages_file"
        ;;

    install)
        if [ -z "$2" ]
        then
            echo "please specify a module and at least one package to install" 1>&2
            exit 2
        fi
        module=$1
        check_module "$module"
        shift
        packages_file=$scriptpath/packages/$module
        mkdir -p "$scriptpath/packages"
        touch "$packages_file"
        packages=$(cat "$packages_file")
        if call_module "$module" install "$@"
        then
            for p in "$@"
            do
                desc=$(call_module "$module" desc "$p")
                packages=$(echo -e "$packages\n$p # $desc" | sort | uniq)
            done
            echo "$packages" > "$packages_file"
        fi
        ;;

    sync)
        module=$1
        if [ -z "$module" ]
        then
            for module in $scriptpath/modules/*
            do
                module=$(basename "$module")
                packages_file=$scriptpath/packages/$module
                mkdir -p "$scriptpath/packages"
                touch "$packages_file"
                packages=$(grep -v -e "^#" | cut -f1 -d' ' < "$packages_file")
                if [ ! -z "$packages" ]
                then
                    call_module "$module" sync "$packages"
                fi
            done
        else
            check_module "$module"
            shift
            packages_file=$scriptpath/packages/$module
            mkdir -p "$scriptpath/packages"
            touch "$packages_file"
            packages=$(grep -v -e "^#" | cut -f1 -d' ' < "$packages_file")
            if [ ! -z "$packages" ]
            then
                call_module "$module" sync "$packages"
            fi
        fi
        ;;

    update)
        module=$1
        if [ -z "$module" ]
        then
            for module in $scriptpath/modules/*
            do
                module=$(basename "$module")
                packages_file=$scriptpath/packages/$module
                mkdir -p "$scriptpath/packages"
                touch "$packages_file"
                packages=$(grep -v -e "^#" | cut -f1 -d' ' < "$packages_file")
                if [ ! -z "$packages" ]
                then
                    call_module "$module" update "$packages"
                fi
            done
        else
            check_module "$module"
            shift
            packages_file=$scriptpath/packages/$module
            mkdir -p "$scriptpath/packages"
            touch "$packages_file"
            packages=$(grep -v -e "^#" | cut -f1 -d' ' < "$packages_file")
            if [ ! -z "$packages" ]
            then
                call_module "$module" update "$packages"
            fi
        fi
        ;;

    uninstall)
        module=$1
        if [ -z "$module" ]
        then
            echo "please specify a module" 1>&2
            exit 2
        fi
        check_module "$module"
        shift
        call_module "$module" uninstall "$@"
        packages_file=$scriptpath/packages/$module
        mkdir -p "$scriptpath/packages"
        touch "$packages_file"
        packages=$(cat "$packages_file")
        for p in "$@"
        do
            packages=$(echo "$packages" | grep -v -e "^$p #")
        done
        echo "$packages" > "$packages_file"
        ;;

    *)
        cat <<EOF
pasy - package synchronization

Usage:

    pasy command [module] [arguments]

Commands:

    diff        diff installed and wanted packages
    edit        edit wanted packages
    install     install packages
    sync        synchronize
    uninstall   uninstall packages
    update      update packages

EOF
        exit 1
        ;;

esac
