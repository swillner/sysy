#!/usr/bin/env bash
set -e

if ! (command -v realpath && command -v dirname) >/dev/null 2>/dev/null
then
    if ask_user "Could not find realpath or dirname executable. Try to install? (requires sudo)" "y"
    then
        sudo apt-get install coreutils
    else
        echo "Cannot proceed without realpath and dirname" 1>&2
        exit 1
    fi
fi

confdir=$HOME/.sysy.d
sysypath=$(dirname "$(dirname "$(realpath "$0")")")
tagsfile=$confdir/tags
tagspath=$(realpath "$sysypath/tags")

# shellcheck source=/dev/null
source "$sysypath/scripts/include.sh"

command=$1
shift || true
case "$command" in

    bootstrap)
        mkdir -p "$confdir"
        ensure_link "$sysypath/bin" "$confdir/bin"
        touch "$confdir/tags"
        ask_user "Edit tags now?" "y" && open_in_editor "$confdir/tags"
        info "Invoking pre-bootstrap scripts..."
        while IFS= read -r tag
        do
            if [[ -n "$tag" && -d "$tagspath/$tag" ]]
            then
                script=$tagspath/$tag/pre-bootstrap.sh
                [ -f "$script" ] && sysypath=$sysypath bash "$script"
            fi
        done < "$tagsfile"

        info "Syncing system configuration..."
        bash "$sysypath/bin/cosy" sync

        ask_user "Update apt packages? (requires sudo)" "y" && sudo apt-get update

        info "Syncing packages..."
        bash "$sysypath/bin/pasy" sync
        info "Syncing dotfiles..."
        bash "$sysypath/bin/dosy" sync

        info "Invoking post-bootstrap scripts..."
        while IFS= read -r tag
        do
            if [[ -n "$tag" && -d "$tagspath/$tag" ]]
            then
                script=$tagspath/$tag/post-bootstrap.sh
                [ -f "$script" ] && sysypath=$sysypath bash "$script"
            fi
        done < "$tagsfile"
        ;;

    full)
        sysy update
        sysy sync
        sysy serversync
        ;;

    serversync)
        serversfile=$confdir/servers
        if [[ -f "$serversfile" ]]
        then
            while IFS= read -r server
            do
                info "Syncing $server..."
                ssh -o LogLevel=QUIET -t "$server" "source \$HOME/.profile && \$HOME/.sysy.d/bin/sysy update && \$HOME/.sysy.d/bin/sysy sync" < /dev/tty || {
                    ret=$?
                    if [[ "$ret" == 255 ]]
                    then
                        exit 255
                    fi
                }
            done < "$serversfile"
        fi
        ;;

    sync)
        info "Syncing system configuration..."
        bash "$sysypath/bin/cosy" sync
        info "Syncing packages..."
        bash "$sysypath/bin/pasy" sync
        info "Syncing dotfiles..."
        bash "$sysypath/bin/dosy" sync
        ;;

    update)
        reposfile=$confdir/repos
        if [[ -f "$reposfile" ]]
        then
            while IFS= read -r repo
            do
                d=$(realpath "$sysypath/$repo")
                info "Updating $d..."
                if ! git -C "$d" pull -q \
                     || ! git -C "$d" submodule update --init --recursive -q
                then
                    error "${COLOR_RED}Update of $d failed${COLOR_CLEAR}"
                fi
            done < "$reposfile"
        fi
        ;;

    *)
        cat <<EOF
sysy - system synchronization

Usage:

    $0 COMMAND

Commands:

    bootstrap                   bootstrap
    full                        update and do all synchronizations
    serversync                  synchronize servers
    sync                        synchronize
    update                      update git repositories

EOF
        print_global_options
        exit 1
        ;;

esac
