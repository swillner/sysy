#!/usr/bin/env bash
set -e
confdir=$HOME/.sysy.d
sysypath=$(dirname "$(dirname "$(realpath "$0")")")
tagsfile=$confdir/tags
tagspath=$(realpath "$sysypath/tags")
modulespath=$(realpath "$sysypath/modules")

# shellcheck source=/dev/null
source "$sysypath/scripts/include.sh"

call_module () {
    local module=$1
    shift 1
    local modulefile=$modulespath/$module
    # shellcheck source=/dev/null
    source "$modulefile" "$@"
}

check_module () {
    local module=$1
    local modulefile=$modulespath/$module
    [[ -f "$modulefile" ]] || error_and_exit "Module $module not found"
}

get_packages () {
    local module=$1
    while IFS= read -r tag
    do
        if [[ -n "$tag" && -d "$tagspath/$tag" ]]
        then
            packagesfile=$tagspath/$tag/packages/$module
            if [[ -f "$packagesfile" ]]
            then
                grep -v -e "^#" < "$packagesfile" | cut -f1 -d' ' | grep -v "^$"
            fi
        fi
    done < "$tagsfile"
}

call_module_for_all_packages () {
    local module=$1
    local command=$2
    local desc=$3
    readarray -t packages <<< "$(get_packages "$module")"
    packages_count=${#packages[@]}
    if [[ "$packages_count" -gt 0 && -n "${packages[0]}" ]]
    then
        if [[ -n "$desc" ]]
        then
            info "$desc $module ($packages_count selected)..."
        fi
        if [[ -n "$command" ]]
        then
            call_module "$module" "$command" "${packages[@]}"
        else
            call_module "$module"
        fi
    fi
}

command=$1
shift || true
case "$command" in

    bootstrap)
        module=$1
        if [[ -z "$module" ]]
        then
            for module in $modulespath/*
            do
                module=$(basename "$module")
                call_module_for_all_packages "$module" "" "Bootstrapping"
            done
        else
            check_module "$module"
            call_module_for_all_packages "$module" "" "Bootstrapping"
        fi
        ;;

    diff)
        module=$1
        [[ -n "$module" ]] || error_and_exit "Please specify a module"
        check_module "$module"
        call_module_for_all_packages "$module" diff
        ;;

    edit)
        module=$1
        [[ -n "$module" ]] || error_and_exit "Please specify a module"
        check_module "$module"
        tag=$2
        [[ -n "$tag" ]] || error_and_exit "Please specify a tag"
        [[ -d "$tagspath/$tag" ]] || error_and_exit "Tag $tag does not exist"
        packages_file=$tagspath/$tag/packages/$module
        open_in_editor "$packages_file"
        ;;

    install)
        module=$1
        [[ -n "$module" ]] || error_and_exit "Please specify a module"
        check_module "$module"
        tag=$2
        [[ -n "$tag" ]] || error_and_exit "Please specify a tag"
        [[ -d "$tagspath/$tag" ]] || error_and_exit "Tag $tag does not exist"
        shift 2
        [[ -n "$1" ]] || error_and_exit "Please specify at least one package to install"
        packagespath=$tagspath/$tag/packages
        packagesfile=$packagespath/$module
        mkdir -p "$packagespath"
        touch "$packagesfile"
        packages_str=$(cat "$packagesfile")
        if call_module "$module" install "$@"
        then
            for p in "$@"
            do
                desc=$(call_module "$module" desc "$p")
                if [[ -n "$desc" ]]
                then
                    desc=" # $desc"
                fi
                packages_str=$(echo -e "$packages_str\\n$p$desc" | grep -v "^$" | sort | uniq)
            done
            echo "$packages_str" > "$packagesfile"
        fi
        ;;

    list)
        module=$1
        [[ -n "$module" ]] || error_and_exit "Please specify a module"
        check_module "$module"
        get_packages "$module"
        ;;

    sync)
        module=$1
        if [[ -z "$module" ]]
        then
            for module in $modulespath/*
            do
                module=$(basename "$module")
                call_module_for_all_packages "$module" sync "Syncing"
            done
        else
            check_module "$module"
            call_module_for_all_packages "$module" sync "Syncing"
        fi
        ;;

    uninstall)
        module=$1
        [[ -n "$module" ]] || error_and_exit "Please specify a module"
        check_module "$module"
        tag=$2
        [[ -n "$tag" ]] || error_and_exit "Please specify a tag"
        [[ -d "$tagspath/$tag" ]] || error_and_exit "Tag $tag does not exist"
        shift 2
        [[ -n "$1" ]] || error_and_exit "Please specify at least one package to uninstall"
        call_module "$module" uninstall "$@"
        packagespath=$tagspath/$tag/packages
        packagesfile=$packagespath/$module
        if [[ -f "$packagesfile" ]]
        then
            packages_str=$(cat "$packagesfile")
            for p in "$@"
            do
                packages_str=$(echo "$packages_str" | grep -v -e "^$p\$" | grep -v -e "^$p ")
            done
            echo "$packages_str" > "$packagesfile"
        fi
        ;;

    update)
        module=$1
        if [[ -z "$module" ]]
        then
            for module in $modulespath/*
            do
                module=$(basename "$module")
                call_module_for_all_packages "$module" update "Updating"
            done
        else
            check_module "$module"
            call_module_for_all_packages "$module" update "Updating"
        fi
        ;;

    *)
        cat <<EOF
pasy - package synchronization

Usage:

    $0 COMMAND [ARGUMENTS]

Commands:

   bootstrap [MODULE]             bootstrap mudule or all used mudules
   diff      MODULE               diff installed and wanted packages
   edit      MODULE TAG           edit wanted packages
   install   MODULE TAG PACKAGES  install packages
   list      MODULE               list packages to install
   sync      [MODULE]             synchronize
   uninstall MODULE TAG PACKAGES  uninstall packages
   update    [MODULE]             update packages

EOF
        print_global_options
        exit 1
        ;;

esac
