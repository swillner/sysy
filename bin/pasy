#!/usr/bin/env bash
set -e
scriptpath=$(dirname "$(realpath "$0")")
confdir=$HOME/.dosy.d
tagsfile=$confdir/tags
tagspath=$(realpath "$scriptpath/../tags")
modulespath=$(realpath "$scriptpath/../modules")

# shellcheck source=/home/sven/sync/dosy/scripts/include.sh
source "$scriptpath/../scripts/include.sh"

call_module () {
    local module=$1
    local command=$2
    shift 2
    local modulefile=$modulespath/$module
    bash "$modulefile" "$command" "$@"
}

check_module () {
    local module=$1
    local modulefile=$modulespath/$module
    if [ ! -f "$modulefile" ]
    then
        error "Module $module not found"
    fi
}

get_packages () {
    local module=$1
    while IFS= read -r tag
    do
        packagesfile=$tagspath/$tag/packages/$module
        if [ -f "$packagesfile" ]
        then
            grep -v -e "^#" < "$packagesfile" | cut -f1 -d' ' # | tr '\n' ' '
        fi
    done < "$tagsfile"
}

call_module_for_all_packages () {
    local module=$1
    local command=$2
    local desc=$3
    readarray -t packages <<< "$(get_packages "$module")"
    packages_count=${#packages[@]}
    if [ "$packages_count" -gt 0 ] && [ ! -z "${packages[0]}" ]
    then
        if [ ! -z "$desc" ]
        then
            info "$desc $module ($packages_count selected)..."
        fi
        call_module "$module" "$command" "${packages[@]}"
    fi
}

command=$1
shift || true
case "$command" in

    bootstrap)
        module=$1
        if [ -z "$module" ]
        then
            for module in $modulespath/*
            do
                module=$(basename "$module")
                call_module_for_all_packages "$module" bootstrap Bootstrapping
            done
        else
            check_module "$module"
            call_module_for_all_packages "$module" bootstrap Bootstrapping
        fi
        ;;

    diff)
        module=$1
        [ ! -z "$module" ] || error "Please specify a module"
        check_module "$module"
        call_module_for_all_packages "$module" diff
        ;;

    edit)
        module=$1
        [ ! -z "$module" ] || error "Please specify a module"
        tag=$2
        [ ! -z "$tag" ] || error "Please specify a tag"
        check_module "$module"
        packages_file=$tagspath/$tag/packages/$module
        open_in_editor "$packages_file"
        ;;

    install)
        module=$1
        [ ! -z "$module" ] || error "Please specify a module"
        tag=$2
        [ ! -z "$tag" ] || error "Please specify a tag"
        shift 2
        if [ -z "$1" ]
        then
            error "Please specify at least one package to install"
        fi
        check_module "$module"
        packagespath=$tagspath/$tag/packages
        packagesfile=$packagespath/$module
        mkdir -p "$packagespath"
        touch "$packagesfile"
        packages_str=$(cat "$packagesfile")
        if call_module "$module" install "$@"
        then
            for p in "$@"
            do
                desc=$(call_module "$module" desc "$p")
                packages_str=$(echo -e "$packages_str\\n$p # $desc" | sort | uniq)
            done
            echo "$packages_str" > "$packagesfile"
        fi
        ;;

    sync)
        module=$1
        if [ -z "$module" ]
        then
            for module in $modulespath/*
            do
                module=$(basename "$module")
                call_module_for_all_packages "$module" sync Syncing
            done
        else
            check_module "$module"
            call_module_for_all_packages "$module" sync Syncing
        fi
        ;;

    uninstall)
        module=${1:?"Please specify a module"}
        tag=${2:?"Please specify a tag"}
        shift 2
        if [ -z "$1" ]
        then
            error "Please specify at least one package to install"
        fi
        check_module "$module"
        call_module "$module" uninstall "$@"
        packagespath=$tagspath/$tag/packages
        packagesfile=$packagespath/$module
        if [ -f "$packagesfile" ]
        then
            packages_str=$(cat "$packagesfile")
            for p in "$@"
            do
                packages_str=$(echo "$packages_str" | grep -v -e "^$p #")
            done
            echo "$packages_str" > "$packagesfile"
        fi
        ;;

    update)
        module=$1
        if [ -z "$module" ]
        then
            for module in $modulespath/*
            do
                module=$(basename "$module")
                call_module_for_all_packages "$module" update Updating
            done
        else
            check_module "$module"
            call_module_for_all_packages "$module" update Updating
        fi
        ;;

    *)
        cat <<EOF
pasy - package synchronization

Usage:

    $0 COMMAND [ARGUMENTS]

Commands:

   bootstrap [MODULE]             bootstrap model or all used models
   diff      MODULE               diff installed and wanted packages
   edit      TAG MODULE           edit wanted packages
   install   TAG MODULE PACKAGES  install packages
   sync      [MODULE]             synchronize
   uninstall TAG MODULE PACKAGES  uninstall packages
   update    [MODULE]             update packages

EOF
        exit 1
        ;;

esac
