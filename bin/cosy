#!/usr/bin/env bash
set -e
confdir=$HOME/.sysy.d
sysypath=$(dirname "$(dirname "$(realpath "$0")")")
tagsfile=$confdir/tags
tagspath=$(realpath "$sysypath/tags")

# shellcheck source=/dev/null
source "$sysypath/scripts/include.sh"

find_local_file () {
    local system_file
    system_file=$1
    local local_file
    while IFS= read -r tag
    do
        if [[ -n "$tag" && -d "$tagspath/$tag" ]]
        then
            local_file=$tagspath/$tag/system$system_file
            if [[ -f "$local_file" ]]
            then
                echo "$local_file"
                return
            fi
        fi
    done < <(tac "$tagsfile") # read reversely to prioritize later tags in file
}

is_text_file () {
    grep -qI '.' "$1"
}

add_file () {
    local tag=$1
    local system_file
    system_file=$(realpath "$2")
    [[ -f "$system_file" ]] || error_and_exit "Could not find $system_file"
    local local_file=$tagspath/$tag/system$system_file
    mkdir -p "$(dirname "$local_file")"
    sudo cat "$system_file" | tee "$local_file"
}

sync_file () {
    local local_file=$1
    local system_file
    if ! system_file=$(realpath "$2" 2>/dev/null)
    then
        local system_dir
        system_dir=$(dirname "$2")
        if ask_user "Create $system_dir?" "y"
        then
            sudo mkdir -p "$system_dir"
        fi
        if ! system_file=$(realpath "$2" 2>/dev/null)
        then
            info "Skipping $2"
            return
        fi
    fi
    [[ -f "$local_file" ]] || error_and_exit "$local_file not handled by cosy"
    if ls "$system_file" >/dev/null 2>/dev/null
    then
        if ! diff "$system_file" "$local_file" >/dev/null 2>/dev/null
        then
            show_diff "$system_file" "$local_file"
            if ask_user "Update $system_file?" "y"
            then
                cat "$local_file" | sudo tee "$system_file" >/dev/null
            else
                info "Skipped $system_file"
            fi
        fi
    else
        if is_text_file "$local_file"
        then
            info "New $system_file:"
            less -X -F "$local_file"
        else
            info "New $system_file (binary)"
        fi
        if ask_user "Add file to system?" "y"
        then
            mkdir -p "$(dirname "$system_file")"
            <"$local_file" tee "$system_file" >/dev/null
            if [[ -x "$local_file" ]]
            then
                chmod +x "$system_file"
            fi
            if ask_user "Make accessible for all?" "y"
            then
                chmod og+rX "$(dirname "$system_file")"
                if [[ -x "$local_file" ]]
                then
                    chmod og+rx "$system_file"
                else
                    chmod og+rX "$system_file"
                fi
            fi
        else
            info "Skipped $system_file"
        fi
    fi
}

command=$1
shift || true
case "$command" in

    add)
        tag=$1
        [[ -d "$tagspath/$tag" ]] || error_and_exit "Tag $tag does not exist"
        system_file=$2
        [[ -f "$system_file" ]] || error_and_exit "Please specify a tag and a system file"
        add_file "$tag" "$system_file"
        ;;

    edit)
        system_file=$1
        [[ -f "$system_file" ]] || error_and_exit "Please specify a system file"
        local_file=$(find_local_file "$system_file")
        if [[ ! -e "$local_file" ]]
        then
            read -r -p "Tag: " tag < /dev/tty
            add_file "$tag" "$system_file"
        fi
        if open_in_editor "$local_file"
        then
            sync_file "$local_file" "$system_file"
        fi
        ;;

    sync)
        [[ $(whoami) == "root" ]] || exec sudo --preserve-env -- "$0" "$command" "$@"
        system_file=$1
        if [[ -z "$system_file" ]]
        then
            shopt -s globstar nullglob
            while IFS= read -r tag
            do
                if [[ -n "$tag" && -d "$tagspath/$tag" ]]
                then
                    filespath=$tagspath/$tag/system
                    for local_file in "$filespath"/**
                    do
                        if [[ -f "$local_file" ]]
                        then
                            local_file=$(realpath --relative-to "$filespath" "$local_file")
                            system_file=/$local_file
                            local_file=$(find_local_file "$system_file") # really find local file with highest priority
                            sync_file "$local_file" "$system_file"
                    fi
                    done
                fi
            done < "$tagsfile"
        else
            local_file=$(find_local_file "$system_file")
            sync_file "$local_file" "$system_file"
        fi
        ;;

    *)
        cat <<EOF
cosy - system configuration synchronization

Usage:

    $0 COMMAND [ARGUMENTS]

Commands:

    add  TAG FILE  add system file to cosy
    edit FILE      edit system file handled by cosy
    sync [FILE]    synchronize
EOF
        print_global_options
        exit 1
        ;;

esac
